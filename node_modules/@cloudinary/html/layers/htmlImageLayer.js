var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import cloneDeep from 'lodash.clonedeep';
import { render } from '../utils/render.js';
var HtmlImageLayer = /** @class */ (function () {
    function HtmlImageLayer(element, userCloudinaryImage, plugins, analyticsOptions) {
        var _this = this;
        this.imgElement = element;
        this.htmlPluginState = { cleanupCallbacks: [], pluginEventSubscription: [] };
        var pluginCloudinaryImage = cloneDeep(userCloudinaryImage);
        render(element, pluginCloudinaryImage, plugins, this.htmlPluginState)
            .then(function () {
            _this.htmlPluginState.pluginEventSubscription.forEach(function (fn) { fn(); });
            _this.imgElement.setAttribute('src', pluginCloudinaryImage.toURL(__assign({}, analyticsOptions && { trackedAnalytics: {
                    sdkCode: analyticsOptions.sdkCode,
                    sdkSemver: analyticsOptions.sdkSemver,
                    techVersion: analyticsOptions.techVersion,
                } })));
        });
    }
    /**
     * Called when component is updated and re-triggers render
     * @param userCloudinaryImage
     * @param plugins
     * @param analyticsOptions
     */
    HtmlImageLayer.prototype.update = function (userCloudinaryImage, plugins, analyticsOptions) {
        var _this = this;
        var pluginCloudinaryImage = cloneDeep(userCloudinaryImage);
        render(this.imgElement, pluginCloudinaryImage, plugins, this.htmlPluginState)
            .then(function () {
            _this.imgElement.setAttribute('src', pluginCloudinaryImage.toURL(__assign({}, analyticsOptions && { trackedAnalytics: {
                    sdkCode: analyticsOptions.sdkCode,
                    sdkSemver: analyticsOptions.sdkSemver,
                    techVersion: analyticsOptions.techVersion,
                } })));
        });
    };
    return HtmlImageLayer;
}());
export { HtmlImageLayer };
